{"version":3,"file":"js/7191.482432bc.js","mappings":"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","sources":["webpack://@radiantearth/stac-browser/./node_modules/base-x/src/index.js","webpack://@radiantearth/stac-browser/./node_modules/bs58/index.js","webpack://@radiantearth/stac-browser/./node_modules/safe-buffer/index.js"],"sourcesContent":["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n"],"names":["_Buffer","base","ALPHABET","length","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","encode","source","Array","isArray","from","isBuffer","zeroes","pbegin","pend","size","b58","carry","it1","Error","it2","str","repeat","decodeUnsafe","alloc","psz","b256","it3","it4","vch","allocUnsafe","fill","decode","string","buffer","module","exports","basex","Buffer","copyProps","src","dst","key","SafeBuffer","arg","encodingOrOffset","allocUnsafeSlow","prototype","Object","create","encoding","buf","undefined","SlowBuffer"],"sourceRoot":""}